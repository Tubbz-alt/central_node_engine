#!/usr/bin/env python

import socket
import sys
import argparse
import time

parser = argparse.ArgumentParser(description='Send link node update to central_node_engine server')
parser.add_argument('--host', metavar='string', type=str, nargs=1, help='Central node hostname')

args = parser.parse_args()

 # create dgram udp socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
except socket.error:
    print 'Failed to create socket'
    sys.exit()
 
host = 'lcls-dev3';#args.host;
port = 4356;

NUM_APPLICATIONS = 1024
APPLICATION_SIZE = 512/8 # 64 bytes per application
    

# 0xAA -> wasLow = 1 / wasHigh = 0
# 0x55 -> wasLow = 0 / wasHigh = 1
appdata = bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 32 bits for timestamp
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 32 bits for timestamp
                     0x0F, 0xAA, 0, 0, 0, 0, 0, 0,
                     0xFF, 0, 0, 0, 0, 0, 0, 0,
                     0xFF, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
#                     0xFF, 0xFF, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
#                     0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 32 bits for timestamp
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 32 bits for timestamp
                     0x99, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 32 bits for timestamp
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 32 bits for timestamp
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0])
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
#                     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])

try :
        #Set the whole string
#    for i in range(NUM_APPLICATIONS):
    s.sendto(appdata, (host, port))
    print 'sent'
        
except socket.error, msg:
    print 'Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()

